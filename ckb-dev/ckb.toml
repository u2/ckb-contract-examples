# Config generated by `ckb init`

data_dir = "data"

[chain]
# Choose the kind of chains to run, possible values:
# - specs/dev.toml
# - specs/testnet.toml
spec = "specs/dev.toml"

[logger]
filter = "info,chain=debug,script=debug"
color = true
log_to_file = true
log_to_stdout = true

[sentry]
# set to blank to disable sentry error collection
dsn = ""

[network]
listen_addresses = ["/ip4/0.0.0.0/tcp/8115"]
public_addresses = []

# Node connects to nodes listed here to discovery other peers when there's no local stored peers.
# When chain.spec is changed, this usually should also be changed to the bootnodes in the new chain.
bootnodes = []

reserved_peers = []
reserved_only = false
max_peers = 125
max_outbound_peers = 8
# 2 minutes
ping_interval_secs = 120
# 20 minutes
ping_timeout_secs = 1200
connect_outbound_interval_secs = 15

[rpc]
listen_address = "127.0.0.1:8114"

# Default is 10MiB = 10 * 1024 * 1024
max_request_body_size = 10485760

# List of API modules: ["Net", "Pool", "Miner", "Chain", "Stats", "Experiment"]
modules = ["Net", "Pool", "Miner", "Chain", "Stats", "Experiment"]

[sync]
verification_level = "Full"
orphan_block_limit = 1024

[tx_pool]
max_pool_size = 10000
max_orphan_size = 10000
max_proposal_size = 10000
max_cache_size = 1000
max_pending_size = 10000
txs_verify_cache_size = 100000

[script]
runner = "Assembly"

[store]
header_cache_size       = 4096
cell_output_cache_size  = 128

# Set the lock script to protect mined CKB.
#
# CKB uses CS architecture for miner. Miner process (ckb miner) gets block
# template from the Node process (ckb run) via RPC. Thus the lock script is
# configured in ckb.toml instead of ckb-miner.toml, and the config takes effect
# after restarting Node process.
#
# The `code_hash` identifies different cryptography algorithm. Read the manual
# of the lock script provider about how to generate this config.
#
# CKB provides an secp256k1 implementation, it requires a hash on the
# compressed public key. The hash algorithm is blake2b, with personal
# "ckb-default-hash". The first 160 bits (20 bytes) are used as the only arg.
#
# You can use any tool you trust to generate a Bitcoin private key and public
# key pair, which can be used in CKB as well. CKB CLI provides the function for
# you to convert the public key into block assembler configuration parameters.
#
# Here is an example using OpenSSL to generate the key pair:
#
# **WARNING**: This command will print the private key to screen.
#
#    openssl ecparam -genkey -name secp256k1 -text -noout -outform DER | \
#       xxd -p -c 1000 | \
#       sed 's/41534e31204f49443a20736563703235366b310a30740201010420/PrivKey: /' | \
#       sed 's/a00706052b8104000aa144034200/\'$'\nPubKey: /'
#
# Once you get your public key, generate the block assembler parameters:
#
#     ckb cli secp256k1-lock <pubkey>
#
# Below is an example block assembler configuration section:
#
# [block_assembler]
# code_hash = "0x9e3b3557f11b2b3532ce352bfe8017e9fd11d154c4c7f9b7aaaa1e621b539a08"
# args = ["ckb cli blake160 <pubkey>"]

[block_assembler]
# secp256k1_sighash_all
code_hash = "0x9e3b3557f11b2b3532ce352bfe8017e9fd11d154c4c7f9b7aaaa1e621b539a08"
# args = [ "blake160(compressed_pubkey)" ]
args = [ "0x36c329ed630d6ce750712a477543672adab57f4c" ]

